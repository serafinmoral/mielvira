options 
{STATIC = false;
 LOOKAHEAD=4;
 FORCE_LA_CHECK=true;
 }


PARSER_BEGIN(DataBaseParse)

import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import Node;
import NodeList;
import Potential;
import PotentialTable;
import PotentialTree;
import Relation;
import Link;
import LinkList;
import java.io.*;

    
public class DataBaseParse {
 String Type; 
 String Name;
 String Title;
 String Comment;
 String Author;
 String WhoChanged;
 String WhenChanged;
 String version;
 boolean locked;
 Vector Consistency;
 NodeList Nodes;
 Vector Relations;
 FiniteStates DefaultFinite;
 //ContinuousNode DefaultContinuous;
 //MixedNode DefaultMixed;
 Relation DefaultRelation;
 int casesNumber;
 int defaultnodetype;
 boolean memory;
 boolean statesdecl;
 
  
 


  public static void main(String args[]) throws ParseException
   ,IOException {
    FileInputStream f;

    f = new FileInputStream("ejemplo.dbc");    

    DataBaseParse parser = new DataBaseParse(f);
    parser.initialize();
 
    parser.CompilationUnit();
    parser.Nodes.print();
    Relation relation = (Relation)parser.Relations.elementAt(0);
    CaseList cases = (CaseList)relation.getValues();
    cases.print();
   
    
    
  }

  public void initialize() {
    String DefaultStates[]= {"absent","present"};

   Name =  new String("");
   Title =  new String("");
   Comment =  new String("");
   Author =  new String("");
   WhoChanged =  new String("");
   WhenChanged =  new String("");
   version =  new String("1.0");
   casesNumber = 0;
   memory = false;
   Consistency = new Vector();
   Nodes = new NodeList();
   Relations = new Vector();
   DefaultFinite = new FiniteStates("Default",DefaultStates);
   DefaultRelation = new Relation();
   DefaultRelation.setKind("conditional-prob");
   DefaultFinite.setTitle("");  
   DefaultFinite.setComment("");
  
//    parser.DefaultContinuous = new ContinuousNode();
//    parser.DefaultMixed = new MixedNode();
     defaultnodetype=1;
 }

}

PARSER_END(DataBaseParse)


SKIP:
{<" "|"\t"|"\n"|"\r">}

SKIP:
{<"//" (~["\n","\r"])* ("\n"|"\r\n")>}

SKIP:
{<"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">}


TOKEN:
{
 <DATABASE: "data-base">|
 <TITLE: "title">|
 <COMMENT: "comment">|
 <AUTHOR: "author">|
 <WHOCHANGED: "whochanged">|
 <WHENCHANGED: "whenchanged">|
 <VERSION: "version">|
 <LOCKED: "locked">|
 <CONSISTENCY: "consistency-properties">|
 <NODE: "node">|  
 <FINITE: "finite-states">|  
 <NODETYPE: "type-of-variable">|  
 <NODEKIND: "kind-of-node">|
 <POSX: "pos_x">|
 <POSY: "pos_y">|
 <STATES: "states">|
 <VALUES: "values">|
 <CASES: "cases">|
 <DEFVALUE: "default">|  
 <EVERY: "every">|
 <RELATION: "relation">|
 <MEMORY: "memory">|
 <CASESNUMBER: "number-of-cases">
 
 
}


TOKEN:
{
 <BOOLEAN: (<TRUE>|<FALSE>)>|
 <TRUE: "true">|
 <FALSE: "false">
}

TOKEN:
{
  <OPEN_PAREN: "(">
  |
  <CLOSE_PAREN: ")">
  |
  <COMMA: ",">  
  |
  <OPEN_COR: "[">
  |
  <CLOSE_COR: "]">
}    


TOKEN:
{
<WORD: <LETTER>(<LETTER>|<DIGIT>)*>
|
<PARAMETER_WORD: <WORD><OPEN_COR>(<WORD>|<INTEGER>)(<COMMA>(<WORD>|<INTEGER>))*<CLOSE_COR>>
|
<#LETTER: ["a"-"z","A"-"Z","_","-"]>
|
<#DIGIT: ["0"-"9"]>
}


TOKEN:
{
 <DECIMAL_LITERAL: ((<DIGIT>)+)>}

TOKEN:
{<INTEGER: ("+"|"-")?(<DIGIT>)+>}

TOKEN:
{<FLOAT: ("+"|"-")?
(((<DIGIT>)+)|
((<DIGIT>)+"."(<DIGIT>)*)|
((<DIGIT>)*"."(<DIGIT>)+)) 
(("E"|"e")<INTEGER>)?>
}

TOKEN:
{<EQUAL: "=">}

TOKEN:
{<STRINGDECIMAL: "\""<DECIMAL_LITERAL>"\"">}

TOKEN:
{<STRING: "\""(~["\""])*"\"">}


void CompilationUnit() :
{}
{
  DataBaseDeclaration() "}"
  <EOF>
}



void DataBaseDeclaration():
{Token T;}
{databaseClass() (T=<WORD>){
 Name=(T.toString());}
 "{" databaseContent ()}




void databaseClass():
{}
{ ((<DATABASE>){Type="database";})
}

void databaseContent():
{}
{ ((Property()|DefaultDeclaration())";")* (ElementDeclaration())* }




void DefaultDeclaration():
{Node N;}
{ (<DEFVALUE>|<EVERY>)
  ((<NODE> <NODETYPE> <EQUAL> (<FINITE>) {defaultnodetype=1;})|
   (<NODE> LOOKAHEAD({defaultnodetype==1}) 
	  (NodeProperty(DefaultFinite)|FiniteProperty(DefaultFinite)))) }



void Property():
{Token T;}

{ 
  (<TITLE><EQUAL>(T=<STRING>){Title=T.image.substring(1,T.image.length()-1);})|
  (<COMMENT><EQUAL>(T=<STRING>){Comment=T.image.substring(1,T.image.length()-1);})|
  (<CONSISTENCY><EQUAL><OPEN_PAREN>  <CLOSE_PAREN>)| 
  (<CONSISTENCY><EQUAL><OPEN_PAREN> ListWords(Consistency) <CLOSE_PAREN>)|
  (<AUTHOR><EQUAL> (T=<STRING>) {Author=T.image.substring(1,T.image.length()-1);})|
  (<WHOCHANGED><EQUAL> (T=<STRING>) {WhoChanged=T.image.substring(1,T.image.length()-1);})|
  (<WHENCHANGED><EQUAL> (T=<STRING>) {WhenChanged=T.image.substring(1,T.image.length()-1);})|
  (<LOCKED><EQUAL> (T=<BOOLEAN>) 
       { if (T.image.equals("true")){locked=true;}
         else {locked=false;}
       })|
 (<VERSION><EQUAL>(T=<FLOAT>){version = T.image;})| 
   (<WORD><EQUAL>(<BOOLEAN>|<WORD>|<STRING>|<DECIMAL_LITERAL>))| 
   (<CASESNUMBER><EQUAL>(T=<DECIMAL_LITERAL>)
   {String temporal = new
           String(T.image.substring(0,T.image.length()));
           try{
              casesNumber = Integer.valueOf(temporal).intValue();
           }catch (NumberFormatException e){
              System.out.println(e);
           }})
}





void ElementDeclaration():
{}
{ NodeDeclaration()|
  RelationDeclaration() }


void NodeDeclaration():
{}
{FiniteDeclaration()}


void FiniteDeclaration():
{
 FiniteStates N;}
{ (<NODE> LOOKAHEAD({defaultnodetype==1}) {N = (FiniteStates)
DefaultFinite.copy();}
   FiniteBody(N) )|
  (<FINITE>  {N= (FiniteStates) DefaultFinite.copy();} FiniteBody(N))
}    
   
  
  
  
void FiniteBody(FiniteStates N):
{Token T;}

{ (((T=<WORD>) {N.setName(T.image);})
| ((T=<PARAMETER_WORD>) {N.setName(T.image);})) 
 (( "{" FiniteNodeProperties(N) "}" )|(";") ){Nodes.insertNode(N);
    }
}




void FiniteNodeProperties(Node N):
{}

{  ( (NodeProperty(N)|(FiniteProperty(N) )) (";") )* }




void NodeProperty(Node N):
{Token T;
 }
  {(<TITLE><EQUAL>(T=<STRING>){N.setTitle(T.image.substring(1,T.image.length()-1));})|
  (<COMMENT><EQUAL>(T=<STRING>){N.setComment(T.image.substring(1,T.image.length()-1));})|
 (<NODEKIND> <EQUAL> (T=<WORD>){N.setKindOfNode(T.image);})|
 (<NODETYPE> <EQUAL> (T=<FINITE>){N.setTypeOfVariable(T.image);})|
 (<POSX> <EQUAL> ((T=<INTEGER>)|(T=<DECIMAL_LITERAL>)){N.setPosX( Integer.valueOf(T.image).intValue() );})|
 (<POSY> <EQUAL> ((T=<INTEGER>)|(T=<DECIMAL_LITERAL>)){N.setPosY( Integer.valueOf(T.image).intValue() );})|
 (<WORD><EQUAL>(<STRING>|<DECIMAL_LITERAL>))
}

void FiniteProperty(Node N):
{Vector V;
 FiniteStates M;}   
{{M = (FiniteStates) N;}
   (<STATES><EQUAL> {V= new Vector();} "(" ListWords(V) ")")
      {M.setStates(V);}
}




void RelationDeclaration():
{Token T;
 Vector C;
 Relation R;}

{<RELATION>  {R = new Relation();R.setVariables(Nodes);}
 ((";")|("{" RelationProperties(R) "}")) {Relations.addElement(R);}
}




void RelationProperties(Relation R):
{}
{ ((RelationProperty(R)";")*)|(";") }



void RelationProperty(Relation R):
{Token T;}
{<COMMENT><EQUAL>(T=<STRING>){R.setComment(T.image.substring(1,T.image.length()-1));}|
 <MEMORY><EQUAL> (MemoryONOFF())|
 <CASES><EQUAL> (CasesDeclaration(R))}


void MemoryONOFF():
{Token T;}
{ T=<BOOLEAN> { String mem = new String(T.image.substring(0,T.image.length()));
                       memory = Boolean.valueOf(mem).booleanValue();}
}
        


void CasesDeclaration(Relation R):
{ 
  String FileAux = new String(Name+"db"+".bin");
  CaseList cases;
  if(memory == true)
       cases = (CaseList)(new CaseListMem(R.getVariables())); 
  else cases = (CaseList)(new CaseListOutMem(R.getVariables(),FileAux));
}

{  "(" (ListAssignments(cases))  ")"
 {R.setValues(cases);}
}


void ListAssignments(CaseList cases):
{}
{ (  (Assignment(cases) (",")?)+ (DefaultAssignment())? (Assignment(cases) (",")?)*) |
     (DefaultAssignment()) (Assignment(cases) (",")?)*
}



void Assignment(CaseList cases):
{Vector V;
 Configuration C;
 Double D;
 Token T;}
{ "[" (V=ListWordIntegers(cases)) "]"

   {C = new Configuration(cases.getVariables(), V);
    cases.put(C);  }

}

Vector ListWordIntegers(CaseList cases):
{Vector V;
 Token T;
 Integer I;
 int i;
 int j;}
{ {V = new Vector();j=0;}
 (
 (
  ((T=<DECIMAL_LITERAL>){I = new Integer(T.image);V.addElement(I);j++;})|
  ((T=<WORD>){ i = (( FiniteStates) cases.getVariables().elementAt(j)).getId(T.image);
             
  I = new Integer(i);V.addElement(I);
               j++;}  )|
  ((T=<STRINGDECIMAL>){i = (( FiniteStates) cases.getVariables().elementAt(j)).getId(T.image.substring(1,T.image.length()-1));
               I = new Integer(i);V.addElement(I);
               j++;})
 )
 (",")?)*
 {return(V);} }




void DefaultAssignment():
{}
{<DEFVALUE><EQUAL><FLOAT>}




void ListWords(Vector C):
{Token T;}

{ ((T=<WORD>|T=<DECIMAL_LITERAL>|T=<PARAMETER_WORD>) 
  {C.addElement(T.toString());} <COMMA> ListWords(C))|
  ((T=<WORD>|T=<DECIMAL_LITERAL>|T=<PARAMETER_WORD>) 
  {C.addElement(T.toString());} ListWords(C))|
  ((T=<WORD>|T=<DECIMAL_LITERAL>|T=<PARAMETER_WORD>) 
  {C.addElement(T.toString());})
  
  
}








