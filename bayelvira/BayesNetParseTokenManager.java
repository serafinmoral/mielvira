/* Generated By:JavaCC: Do not edit this line. BayesNetParseTokenManager.java */
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import Node;
import NodeList;
import Potential;
import PotentialTable;
import PotentialTree;
import Relation;
import Link;
import LinkList;
import java.io.*;

public class BayesNetParseTokenManager implements BayesNetParseConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1003040040L) != 0L)
         {
            jjmatchedKind = 44;
            return 3;
         }
         if ((active0 & 0x6fcfb7fb0L) != 0L)
         {
            jjmatchedKind = 44;
            return 55;
         }
         if ((active0 & 0x2100008000L) != 0L)
         {
            jjmatchedKind = 44;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x1002000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 2;
         }
         if ((active0 & 0x7fdfffff0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 55;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fffffff0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 55;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 56;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 5;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
            return 55;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 56;
         }
         if ((active0 & 0x7f5febfd0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 55;
         }
         if ((active0 & 0xa014020L) != 0L)
            return 55;
         return -1;
      case 4:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
            return 55;
         }
         if ((active0 & 0x7b4cebf90L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 55;
         }
         if ((active0 & 0x41300040L) != 0L)
            return 55;
         return -1;
      case 5:
         if ((active0 & 0x80c01100L) != 0L)
            return 55;
         if ((active0 & 0x7340eae90L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 55;
         }
         return -1;
      case 6:
         if ((active0 & 0x7240ea600L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 55;
         }
         if ((active0 & 0x10000890L) != 0L)
            return 55;
         return -1;
      case 7:
         if ((active0 & 0x120020000L) != 0L)
            return 55;
         if ((active0 & 0x6040ca600L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 55;
         }
         return -1;
      case 8:
         if ((active0 & 0x6040ca600L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 55;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000200L) != 0L)
            return 55;
         if ((active0 & 0x6000ca400L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 55;
         }
         return -1;
      case 10:
         if ((active0 & 0x400L) != 0L)
            return 55;
         if ((active0 & 0x6000ca000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
            return 55;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000L) != 0L)
            return 55;
         if ((active0 & 0x60004a000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 11;
            return 55;
         }
         return -1;
      case 12:
         if ((active0 & 0x8000L) != 0L)
            return 55;
         if ((active0 & 0x600042000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
            return 55;
         }
         return -1;
      case 13:
         if ((active0 & 0x600042000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 13;
            return 55;
         }
         return -1;
      case 14:
         if ((active0 & 0x600042000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 14;
            return 55;
         }
         return -1;
      case 15:
         if ((active0 & 0x600040000L) != 0L)
            return 55;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 15;
            return 55;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 16;
            return 55;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 17;
            return 55;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 18;
            return 55;
         }
         return -1;
      case 19:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 19;
            return 55;
         }
         return -1;
      case 20:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 20;
            return 55;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 40);
      case 59:
         return jjStopAtPos(0, 55);
      case 61:
         return jjStopAtPos(0, 50);
      case 91:
         return jjStopAtPos(0, 41);
      case 93:
         return jjStopAtPos(0, 42);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xc002080L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x30000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2100008000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400080000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x11000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200004010L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1003040040L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800800L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x600L);
      case 123:
         return jjStopAtPos(0, 54);
      case 125:
         return jjStopAtPos(0, 53);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2209800000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10020810L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x420098040L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4307080L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000100L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x42000420L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000820000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000080L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x50409a000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8300000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000150L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10020000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000200L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400080000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 55);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 55);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 55);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x220040000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80008000L);
      case 107:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000040L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000002800L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000c0000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000400L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 55);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 55);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x4c01080L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x110L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100028000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 120:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 55);
         break;
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 55);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 55);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100020000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000c0800L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 55);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x4008000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000c0000L);
      case 107:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 55);
         break;
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100020000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 55);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000c0000L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 55);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 55);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4008000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000200L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x82000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x48000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 9, 55);
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000400L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 10, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x600000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x600000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 19, 55);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 15, 55);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x600000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x600000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x600002000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(15, 18, 55);
         break;
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(15, 33, 55);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(15, 34, 55);
         break;
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(21, 13, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 5:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 6:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 7:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 55:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(0, 7);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 47)
                     jjAddStates(14, 15);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  if (curChar == 45)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(16, 18);
                  }
                  break;
               case 56:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 2:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  break;
               case 15:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 17:
               case 18:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 19:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 42)
                     jjAddStates(22, 23);
                  break;
               case 23:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 24:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 25:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 26:
                  if (curChar != 45)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(16, 18);
                  break;
               case 27:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if (curChar == 45)
                     jjCheckNAddStates(24, 26);
                  break;
               case 30:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 31:
                  if (curChar == 44)
                     jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if (curChar == 45)
                     jjCheckNAddStates(30, 32);
                  break;
               case 33:
                  if ((0xd7ffecfefffff9ffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 39:
                  if ((0xd7ffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(0, 7);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(43, 11);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(46, 11);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(46, 11);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 9);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(39, 44);
                  break;
               case 50:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 53:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 34 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 115)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 55:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(16, 18);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 56:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 101)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 2:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 91)
                     jjAddStates(45, 47);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 117)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 101 && kind > 35)
                     kind = 35;
                  break;
               case 4:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 16:
                  jjAddStates(19, 21);
                  break;
               case 21:
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  jjCheckNAddTwoStates(24, 22);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(16, 18);
                  break;
               case 27:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 91)
                     jjAddStates(45, 47);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 30:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 33:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 34:
                  if (curChar == 93 && kind > 43)
                     kind = 43;
                  break;
               case 39:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(39);
                  break;
               case 53:
                  jjAddStates(50, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(39);
                  }
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 39:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(39);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(50, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 42, 43, 44, 45, 47, 9, 11, 42, 9, 49, 51, 53, 54, 15, 20, 
   27, 28, 39, 16, 17, 19, 23, 25, 30, 31, 34, 32, 35, 36, 31, 33, 
   34, 31, 36, 34, 38, 31, 34, 43, 44, 45, 47, 9, 11, 29, 37, 38, 
   12, 13, 53, 54, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\156\145\164\167\157\162\153", "\142\156\145\164", 
"\164\151\164\154\145", "\143\157\155\155\145\156\164", "\141\165\164\150\157\162", 
"\167\150\157\143\150\141\156\147\145\144", "\167\150\145\156\143\150\141\156\147\145\144", 
"\166\145\162\163\151\157\156", "\154\157\143\153\145\144", 
"\143\157\156\163\151\163\164\145\156\143\171\55\160\162\157\160\145\162\164\151\145\163", "\156\157\144\145", "\146\151\156\151\164\145\55\163\164\141\164\145\163", 
"\154\151\156\153", "\162\145\154\141\164\151\157\156", 
"\164\171\160\145\55\157\146\55\166\141\162\151\141\142\154\145", "\153\151\156\144\55\157\146\55\156\157\144\145", "\160\157\163\137\170", 
"\160\157\163\137\171", "\163\164\141\164\145\163", "\166\141\154\165\145\163", 
"\164\141\142\154\145", "\164\162\145\145", "\143\157\156\166\145\170\55\163\145\164", 
"\143\141\163\145", "\144\145\146\141\165\154\164", "\144\151\162\145\143\164\145\144", 
"\145\166\145\162\171", "\141\143\164\151\166\145", "\146\165\156\143\164\151\157\156", 
"\156\141\155\145\55\157\146\55\162\145\154\141\164\151\157\156", "\153\151\156\144\55\157\146\55\162\145\154\141\164\151\157\156", null, 
"\164\162\165\145", "\146\141\154\163\145", "\50", "\51", "\54", "\133", "\135", null, null, null, 
null, null, null, null, "\75", null, null, "\175", "\173", "\73", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xff9ffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
protected char curChar;
public BayesNetParseTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BayesNetParseTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
